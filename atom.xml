<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>封阳葵的博客</title>
  
  
  <link href="https://github.com/fengyk1/atom.xml" rel="self"/>
  
  <link href="https://github.com/fengyk1/"/>
  <updated>2021-09-19T06:25:48.860Z</updated>
  <id>https://github.com/fengyk1/</id>
  
  <author>
    <name>封阳葵</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用ts对fetch进行简单封装</title>
    <link href="https://github.com/fengyk1/2021/09/19/%E4%BD%BF%E7%94%A8ts%E5%AF%B9fetch%E8%BF%9B%E8%A1%8C%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85/"/>
    <id>https://github.com/fengyk1/2021/09/19/%E4%BD%BF%E7%94%A8ts%E5%AF%B9fetch%E8%BF%9B%E8%A1%8C%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85/</id>
    <published>2021-09-19T05:44:31.000Z</published>
    <updated>2021-09-19T06:25:48.860Z</updated>
    
    <content type="html"><![CDATA[<p>近期打算使用nodejs配合mysql做一个简单的增删改查操作，由于antd没有提供请求相关的api，因此打算对fetch进行一个简单的封装</p><blockquote><p>fetch是XMLHttpRequest的升级版，可以在javascript中发起http请求，浏览器原生支持</p></blockquote><h3 id="fetch和XMLHttpRequest的区别"><a href="#fetch和XMLHttpRequest的区别" class="headerlink" title="fetch和XMLHttpRequest的区别"></a>fetch和XMLHttpRequest的区别</h3><ul><li><p><code>js fetch</code>使用Promise，因此很大程度上简化了写法</p></li><li><p>设计更加合理，API分散在(Response、Request、Header)上面</p></li><li><p><code>js fetch </code> 通过数据流处理数据，可以对数据进行分块处理，对于请求大文件非常有用，XMLHTTPRequest不支持数据流，不支持分块处理，必须等所有数据请求完成后才能使用</p><h3 id="发起get请求"><a href="#发起get请求" class="headerlink" title="发起get请求"></a>发起get请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果后端返回的内容不是json会报错</span></span><br><span class="line">fetch(url,&#123;</span><br><span class="line">  <span class="comment">// 请求服务器的相关参数</span></span><br><span class="line">  method: <span class="string">&#x27;GET&#x27;</span>, <span class="comment">//更多参数可以查询mdn</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>res.json()).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 从后台拿到的json内容</span></span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>get方式参数需要在地址栏进行传输，如果传递的参数是一个json对象，需要对传入的参数进行处理</p></blockquote><h3 id="发起post请求"><a href="#发起post请求" class="headerlink" title="发起post请求"></a>发起post请求</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> params = &#123;<span class="attr">a</span>:<span class="number">1</span>,<span class="attr">b</span>:<span class="number">2</span>&#125;</span><br><span class="line">fetch(url,&#123;</span><br><span class="line">  method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">  <span class="comment">// POST方式参数需要在body里面进行传递，传递的是一个json字符串</span></span><br><span class="line">  body: <span class="built_in">JSON</span>.stringify(params),</span><br><span class="line">  <span class="comment">// header上的参数</span></span><br><span class="line">  headers: <span class="keyword">new</span> Headers(&#123;</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 更多参数可以前往mdn进行查询</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="简单封装fetch"><a href="#简单封装fetch" class="headerlink" title="简单封装fetch"></a>简单封装fetch</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// headers信息类型</span></span><br><span class="line">interface HeadersProps&#123;</span><br><span class="line">  [key:string]:any</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化配置数据类型</span></span><br><span class="line">interface OptionsProps&#123;</span><br><span class="line">  baseURL:string; <span class="comment">// 服务器地址</span></span><br><span class="line">  headers?:HeadersProps;  <span class="comment">// header信息</span></span><br><span class="line">  timeout?:number;  <span class="comment">// 超时时长设置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 请求参数</span></span><br><span class="line">interface FetchParams&#123;</span><br><span class="line">  url:string; <span class="comment">// 请求地址</span></span><br><span class="line">  method:string;  <span class="comment">// 请求方法，POST、GET</span></span><br><span class="line">  params: &#123; <span class="comment">// 请求参数</span></span><br><span class="line">    [key:string]:any</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 请求参数，调用Get或Post时不需要method</span></span><br><span class="line">interface FetchOptions&#123;</span><br><span class="line">  url:string;</span><br><span class="line">  params:&#123;</span><br><span class="line">    [key:string]:any</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Http</span></span>&#123;</span><br><span class="line">  baseURL:string = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  headers:HeadersProps = &#123;&#125;;</span><br><span class="line">  timeout:number = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 保存初始化信息、请求前和请求后的拦截可以在这里保存到实例上，在doGet和doPost分别调用就可以了</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options:OptionsProps</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;baseURL = <span class="string">&#x27;&#x27;</span>,headers = &#123;&#125;,timeout = <span class="number">100000</span>&#125; = options</span><br><span class="line">    <span class="built_in">this</span>.baseURL = baseURL</span><br><span class="line">    <span class="built_in">this</span>.headers = headers || &#123;&#125;</span><br><span class="line">    <span class="built_in">this</span>.timeout = timeout</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// GET方式处理，</span></span><br><span class="line">  private <span class="function"><span class="title">doGet</span>(<span class="params">options:FetchParams</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;url,method,params&#125; = options</span><br><span class="line">    <span class="comment">// get参数是在地址栏进行传输，需要将参数进行转换</span></span><br><span class="line">    <span class="keyword">let</span> query = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(params).forEach(<span class="function">(<span class="params">key,index</span>)=&gt;</span>&#123;</span><br><span class="line">      query += <span class="string">`<span class="subst">$&#123;index === <span class="number">0</span> ? <span class="string">&#x27;?&#x27;</span> : <span class="string">&#x27;&amp;&#x27;</span>&#125;</span><span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;params[key]&#125;</span>`</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 超时控制，使用Promise.race控制</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.timeoutFetch(fetch(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.baseURL&#125;</span><span class="subst">$&#123;url&#125;</span><span class="subst">$&#123;query&#125;</span>`</span>, &#123;</span><br><span class="line">      method</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.json()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// post请求处理</span></span><br><span class="line">  private <span class="function"><span class="title">doPost</span>(<span class="params">options:FetchParams</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;url,method,params&#125; = options</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.timeoutFetch(fetch(<span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.baseURL&#125;</span><span class="subst">$&#123;url&#125;</span>`</span>, &#123;</span><br><span class="line">      method,</span><br><span class="line">      body: <span class="built_in">JSON</span>.stringify(params),</span><br><span class="line">      <span class="comment">// headers需要在options里面接收，再对初始化参数进行合并，目前没有处理</span></span><br><span class="line">      <span class="comment">// TODO</span></span><br><span class="line">      headers: <span class="keyword">new</span> Headers(<span class="built_in">this</span>.headers)</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span>=&gt;</span> res.json()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 暴露给外层调用的post方法</span></span><br><span class="line">  <span class="function"><span class="title">Post</span>(<span class="params">options:FetchOptions</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.doPost(<span class="built_in">Object</span>.assign(options,&#123;<span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>&#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 暴露给外层调用的get方法</span></span><br><span class="line">  <span class="function"><span class="title">Get</span>(<span class="params">options:FetchOptions</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.doGet(<span class="built_in">Object</span>.assign(options,&#123;<span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>&#125;))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 超时控制</span></span><br><span class="line">  private <span class="function"><span class="title">timeoutFetch</span>(<span class="params">promise:<span class="built_in">Promise</span>&lt;any&gt;</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> timeoutPromise = <span class="function">(<span class="params">timeout:number</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;超时&#x27;</span>))</span><br><span class="line">        &#125;,timeout)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// race接收多个Promise，哪个promise先返回结果就返回哪个promise，超时后就不会再等待fetch了</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.race([timeoutPromise(<span class="built_in">this</span>.timeout),promise])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Http</span><br></pre></td></tr></table></figure><blockquote><p>使用方式如下</p></blockquote><pre><code class="js"> import Http from &#39;./http&#39; const baseURL = &#39;http://xxx&#39; const http = new Http(&#123;   baseURL,   timeout:1000 &#125;) http.Get(&#123;   url: &#39;/login&#39;,   params: &#123;username:&#39;admin&#39;, password:&#39;admin&#39;&#125; &#125;).then(res=&gt;&#123;   console.log(res) &#125;)```</code></pre></li></ul><blockquote><p><font color="red">注: fetch方法有很多未完善的地方，如需使用请自行完善</font></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;近期打算使用nodejs配合mysql做一个简单的增删改查操作，由于antd没有提供请求相关的api，因此打算对fetch进行一个简单的封装&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;fetch是XMLHttpRequest的升级版，可以在javascript中发起http请</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Promise原理与实现</title>
    <link href="https://github.com/fengyk1/2021/09/14/Promise%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <id>https://github.com/fengyk1/2021/09/14/Promise%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-09-14T03:20:19.000Z</published>
    <updated>2021-09-14T07:18:57.468Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Promise原理与实现"><a href="#Promise原理与实现" class="headerlink" title="Promise原理与实现"></a>Promise原理与实现</h2><h3 id="Promise的状态"><a href="#Promise的状态" class="headerlink" title="Promise的状态"></a>Promise的状态</h3><blockquote><p>一个Promise必然处于一下几个状态之一</p></blockquote><ul><li><p>pendding 初始状态 等待着，既没有成功，也没有失败</p></li><li><p>fulfilled 成功</p></li><li><p>rejected 失败</p><p>等待状态的Promise会在调用resolve后会变为成功状态，调用reject后变为失败状态，接下来使用es6实现一个最简单的Promise</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Status = &#123;</span><br><span class="line">  PENDDING: <span class="string">&#x27;PENDDING&#x27;</span>,</span><br><span class="line">  FULFILLED: <span class="string">&#x27;FULFILLED&#x27;</span>,</span><br><span class="line">  REJECTED: <span class="string">&#x27;REJECTED&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Promise类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Promise</span></span>&#123;</span><br><span class="line">  <span class="comment">// 传入的函数</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">exectuer</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 定义成功函数数组，用来存放成功后的回调函数</span></span><br><span class="line">    <span class="built_in">this</span>.resolveCallbacks = []</span><br><span class="line">    <span class="comment">// 定义失败函数数组，用来存放失败后的回调函数</span></span><br><span class="line">    <span class="built_in">this</span>.rejectCallbacks = []</span><br><span class="line">    <span class="comment">// 状态 初始状为PENDDING</span></span><br><span class="line">    <span class="built_in">this</span>.status = Status.PENDDING</span><br><span class="line">    <span class="comment">// 调用resolve后传入的值</span></span><br><span class="line">    <span class="built_in">this</span>.value = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="comment">// 调用reject后传入的值</span></span><br><span class="line">    <span class="built_in">this</span>.reason = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="comment">// resolve方法</span></span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">// PENDDING状态下保存相关数据</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === Status.PENDDING)&#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">        <span class="built_in">this</span>.status = Status.FULFILLED;</span><br><span class="line">        <span class="built_in">this</span>.resolveCallbacks.forEach(<span class="function"><span class="params">cb</span>=&gt;</span>cb())</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// reject方法</span></span><br><span class="line">    <span class="keyword">const</span> reject = <span class="function">(<span class="params">reason</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.status === Status.PENDDING)&#123;</span><br><span class="line">        <span class="built_in">this</span>.reason = reason;</span><br><span class="line">        <span class="built_in">this</span>.status = Status.REJECTED;</span><br><span class="line">        <span class="built_in">this</span>.rejectCallbacks.forEach(<span class="function"><span class="params">cb</span>=&gt;</span>cb())</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      exectuer(resolve,reject)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">      reject(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 注:这里只是把函数保存到数组里面，实际是在resolve方法里面执行</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@onFulfilled </span>成功执行的函数</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@onRejected </span>失败执行的函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="title">then</span>(<span class="params">onFulfilled,onRejected</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> fulfulled = onFulfilled || (<span class="function"><span class="params">x</span>=&gt;</span>x)</span><br><span class="line">    <span class="keyword">const</span> rejected = onRejected || (<span class="function"><span class="params">x</span>=&gt;</span>x)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.resolveCallbacks.push(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      fulfulled(<span class="built_in">this</span>.value)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">this</span>.rejectCallbacks.push(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      rejected(<span class="built_in">this</span>.reason)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Promise原理与实现&quot;&gt;&lt;a href=&quot;#Promise原理与实现&quot; class=&quot;headerlink&quot; title=&quot;Promise原理与实现&quot;&gt;&lt;/a&gt;Promise原理与实现&lt;/h2&gt;&lt;h3 id=&quot;Promise的状态&quot;&gt;&lt;a href=&quot;#Pro</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>webpack学习笔记</title>
    <link href="https://github.com/fengyk1/2021/06/26/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://github.com/fengyk1/2021/06/26/webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-06-26T09:39:36.000Z</published>
    <updated>2021-09-19T06:28:42.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack构建流程"><a href="#webpack构建流程" class="headerlink" title="webpack构建流程"></a>webpack构建流程</h2><p>webpack的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：首先会从配置文件和Shell渔具中读取与合并参数，并初始化需要使用的插件和配置插件等执行环境所需要的参数；初始化完成后悔调用Compiler的run来真正启动webpack编译构建过程，webpack的构建流程包括compile、make、build、seal、emit阶段，执行完这些阶段就完成了构建过程。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h5 id="entry-options启动"><a href="#entry-options启动" class="headerlink" title="entry-options启动"></a>entry-options启动</h5><p>从配置文件和Shell语句中读取与合并参数，得出最终的参数。</p><h5 id="run实例化"><a href="#run实例化" class="headerlink" title="run实例化"></a>run实例化</h5><p>Compiler:用上一步得到的参数初始化Compiler对象，加载所有配置的插件，执行对象的run方法开始执行编译</p><h5 id="编译构建"><a href="#编译构建" class="headerlink" title="编译构建"></a>编译构建</h5><h5 id="entry-确定入口"><a href="#entry-确定入口" class="headerlink" title="entry 确定入口"></a>entry 确定入口</h5><p>根据配置中的entry找出所有的入口文件</p><h5 id="make-编译模块"><a href="#make-编译模块" class="headerlink" title="make 编译模块"></a>make 编译模块</h5><p>从入口文件触发，调用所有配置的Loader对模块进行翻译，再找出该模块依赖的模块，再地柜本步骤直到所有入口依赖的文件都经过了本步骤处理</p><h5 id="seal-输出资源"><a href="#seal-输出资源" class="headerlink" title="seal 输出资源"></a>seal 输出资源</h5><p>根据入口和模块之前的依赖关系，组装一个个包含多个模块的Chunk，再把每个Chunk转换成一个单独的文件加入到输出列表，这步是可以修改输出的内容的最后机会</p><h5 id="输出完成"><a href="#输出完成" class="headerlink" title="输出完成"></a>输出完成</h5><p>在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;webpack构建流程&quot;&gt;&lt;a href=&quot;#webpack构建流程&quot; class=&quot;headerlink&quot; title=&quot;webpack构建流程&quot;&gt;&lt;/a&gt;webpack构建流程&lt;/h2&gt;&lt;p&gt;webpack的运行流程是一个串行的过程，从启动到结束会依次执行以下</summary>
      
    
    
    
    
    <category term="javascript" scheme="https://github.com/fengyk1/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>React Fiber学习笔记</title>
    <link href="https://github.com/fengyk1/2021/06/26/React-Fiber%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://github.com/fengyk1/2021/06/26/React-Fiber%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-06-26T09:35:47.000Z</published>
    <updated>2021-06-26T09:36:03.219Z</updated>
    
    <content type="html"><![CDATA[<p>Fiber笔记</p><ul><li><p>fiber是一个调度，在浏览器处理完js，媒体查询，事件等操作后如果有空闲时间会把时间让出来让react去使用，执行自己的任务</p></li><li><p>fiber也是一种数据结构，子元素有一个指针指向父元素，兄弟元素之前也有相互的指针</p></li><li><p>fiber是通过requestAnimationFrame和MessageChannel进行模拟实现的requestIdleCallback</p></li></ul><p>Fiber架构有两个主要阶段：</p><ul><li>Reconciliation/render阶段和commit阶段。在源码中，大部分地方都会把”reconciliation阶段”成为”render阶段”。就是在render阶段里面，react遍历了组件树，并且做了以下这些事情<ul><li>更新state和props</li><li>调用生命周期函数</li><li>通过调用render方法，从组件中获取children</li><li>把获取到的children跟之前的children相比</li><li>最后计算出需要执行的DOM操作是什么</li></ul></li></ul><p>在fiber架构中，所有的这些activity都成为”work”。一个fiber node需要做什么样的work取决于其对应的react element是什么类型。比如，对于一个class component而言，React需要做的work就是实例化这个组件。而对于functional component来说，他没有这样的work需要去完成。</p><p>​    </p><h2 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h2><ul><li>每一帧执行前会执行这个方法</li><li>requestAnimationFrame属于高优先级任务</li></ul><h2 id="requestIdleCallback"><a href="#requestIdleCallback" class="headerlink" title="requestIdleCallback"></a>requestIdleCallback</h2><ul><li>每一帧执行完成后有空余时间才会执行，不一定每一帧都会执行，属于低优先级任务</li><li>浏览器很长时间没有执行其他任务，那么idlecallback时间会延长，最长是50ms</li></ul><h2 id="MessageChannel"><a href="#MessageChannel" class="headerlink" title="MessageChannel"></a>MessageChannel</h2><ul><li>requestIdleCallback目前只有chrome支持</li><li>所以目前React利用MessageChannel模拟了requestIdleCallback，将回调延迟到绘制之后执行</li><li>MessageChannel API运行我们创建一个新的消息通道，并通过它的两个MessagePort属性发送数据</li><li>MessageChannel创建了一个通信的管道，这个管道有两个端口，每个端口都可以通过postMessage发送数据，而一个端口只要绑定了onmessage回调方法，就可以接收到信息</li><li>MessageChannel是一个宏任务</li></ul><p>例如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> channel = <span class="keyword">new</span> MessageChannel()</span><br><span class="line"><span class="keyword">let</span> port1 = channel.port1</span><br><span class="line"><span class="keyword">let</span> port2 = channel.port2</span><br><span class="line"></span><br><span class="line">port1.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;port1收到来自port2的数据&#x27;</span>,event.data)</span><br><span class="line">&#125;</span><br><span class="line">port2.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;port2收到来自port1的数据&#x27;</span>,event.data)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// postMessage是一个宏任务，在渲染之后执行的</span></span><br><span class="line">port1.postMessage(<span class="string">&#x27;发送给port2&#x27;</span>)</span><br><span class="line">port1.postMessage(<span class="string">&#x27;发送给port1&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Fiber笔记&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;fiber是一个调度，在浏览器处理完js，媒体查询，事件等操作后如果有空闲时间会把时间让出来让react去使用，执行自己的任务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fiber也是一种数据结构，子元素有一个指针指向父元素，兄弟元素</summary>
      
    
    
    
    
    <category term="javascript" scheme="https://github.com/fengyk1/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js模块化笔记</title>
    <link href="https://github.com/fengyk1/2021/06/23/js%E6%A8%A1%E5%9D%97%E5%8C%96%E7%AC%94%E8%AE%B0/"/>
    <id>https://github.com/fengyk1/2021/06/23/js%E6%A8%A1%E5%9D%97%E5%8C%96%E7%AC%94%E8%AE%B0/</id>
    <published>2021-06-23T02:34:04.000Z</published>
    <updated>2021-09-19T06:28:02.183Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Commonjs"><a href="#Commonjs" class="headerlink" title="Commonjs"></a>Commonjs</h2><p>commonjs模块的加载时机是，输入的是被输出的值的拷贝。也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">var</span> counter = <span class="built_in">require</span>(<span class="string">&#x27;./lib&#x27;</span>).counter;</span><br><span class="line"><span class="keyword">var</span> incCounter = <span class="built_in">require</span>(<span class="string">&#x27;./lib&#x27;</span>).incCounter;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(counter);  <span class="comment">// 3</span></span><br><span class="line">incCounter();</span><br><span class="line"><span class="built_in">console</span>.log(counter); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>上面代码说明，counter输出以后，lib.js模块内部的变化就影响不到counter了。这是因为counter是一个原始类型的值，会被缓存。</p><p>common.js规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。</p><h2 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h2><p>AMD模块定义非常清晰，不会污染全局环境，能够清楚的显示依赖关系。AMD模式可以用于浏览器环境，并且允许非同步加载模块，也可以根据需要动态加载模块。</p><h2 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h2><p>CMD规范专门用于浏览器端，模块的加载是异步的，模块使用时才会加载执行。CMD规范整合了CommonJS和AMD规范的特点。在Sea.js中，所有JavaScript模块都遵循CMD模块定义规范。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义有依赖的模块</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>, <span class="built_in">exports</span>, <span class="built_in">module</span></span>)</span>&#123;</span><br><span class="line">  <span class="comment">//引入依赖模块(同步)</span></span><br><span class="line">  <span class="keyword">var</span> module2 = <span class="built_in">require</span>(<span class="string">&#x27;./module2&#x27;</span>)</span><br><span class="line">  <span class="comment">//引入依赖模块(异步)</span></span><br><span class="line">    <span class="built_in">require</span>.async(<span class="string">&#x27;./module3&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">m3</span>) </span>&#123;</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="comment">//暴露模块</span></span><br><span class="line">  <span class="built_in">exports</span>.xxx = value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="ES6模块化"><a href="#ES6模块化" class="headerlink" title="ES6模块化"></a>ES6模块化</h2><p>ES6模块的设计思想是尽量的静态化，是的编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS和AMD模块，都只能在运行时确定这些东西。比如，CommonJS模块就是对象，输入时必须查找对象属性。</p><h2 id="ES6模块与CommonJS模块的差异"><a href="#ES6模块与CommonJS模块的差异" class="headerlink" title="ES6模块与CommonJS模块的差异"></a>ES6模块与CommonJS模块的差异</h2><p>他们又两个重大差异:</p><ul><li><p>CommonJS模块输出的是一个值的拷贝，ES6模块输出的是值的引用。</p></li><li><p>CommonJS模块是运行时加载，ES6模块是编译时输出接口</p><blockquote><p>因为Commonjs加载的是一个对象(即module.exports属性)，该对象只有在脚本运行完才会生成。而ES6模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</p></blockquote></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>CommonJS规范主要用于服务端编程，加载模块是同步的，这并不适合在浏览器环境，因为同步意味着阻塞加载，浏览器资源是异步加载的，因此有了AMD CMD解决方案</li><li>AMD规范在浏览器环境中异步加载模块，而且可以并行加载多个模块。不过，AMD规范开发成本高，代码的阅读和书写比较困难，模块定义方式的语义不顺畅。</li><li>CMD规范和AMD规范很相似，都用于浏览器变成，依赖就近，延迟执行，可以很容易在Node.js中运行。不过，依赖SPM打包，模块的加载逻辑偏重</li><li>ES6在语言标准的层面上，实现了模块功能，而且变得相当简单，完全可以取代CommonJS和AMD规范，成为浏览器和服务器通用的模块解决方案</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Commonjs&quot;&gt;&lt;a href=&quot;#Commonjs&quot; class=&quot;headerlink&quot; title=&quot;Commonjs&quot;&gt;&lt;/a&gt;Commonjs&lt;/h2&gt;&lt;p&gt;commonjs模块的加载时机是，输入的是被输出的值的拷贝。也就是说，一旦输出一个值，模块内</summary>
      
    
    
    
    
    <category term="javascript" scheme="https://github.com/fengyk1/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>react高阶组件</title>
    <link href="https://github.com/fengyk1/2021/06/07/react%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/"/>
    <id>https://github.com/fengyk1/2021/06/07/react%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6/</id>
    <published>2021-06-07T14:40:46.000Z</published>
    <updated>2021-06-08T02:48:40.174Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是高阶组件-HOC-？"><a href="#什么是高阶组件-HOC-？" class="headerlink" title="什么是高阶组件(HOC)？"></a>什么是高阶组件(HOC)？</h2><blockquote><p>高阶组件就是一个组件包裹着另外一个组件</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">WithComponent</span>(<span class="params">Wrapper</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">WrapComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">          &lt;Wrapper /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是高阶组件-HOC-？&quot;&gt;&lt;a href=&quot;#什么是高阶组件-HOC-？&quot; class=&quot;headerlink&quot; title=&quot;什么是高阶组件(HOC)？&quot;&gt;&lt;/a&gt;什么是高阶组件(HOC)？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;高阶组件就是一个组件包裹着</summary>
      
    
    
    
    
    <category term="react" scheme="https://github.com/fengyk1/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>call,apply,bind的模拟实现</title>
    <link href="https://github.com/fengyk1/2021/06/03/call-apply-bind%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/"/>
    <id>https://github.com/fengyk1/2021/06/03/call-apply-bind%E7%9A%84%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-06-03T07:40:34.000Z</published>
    <updated>2021-09-19T06:28:21.694Z</updated>
    
    <content type="html"><![CDATA[<p>以前面试经常被问到call,apply,bind的区别是什么，一直也没有深入研究，趁着这两天比较空闲，打算研究一下这个问题</p><h2 id="三者的区别"><a href="#三者的区别" class="headerlink" title="三者的区别"></a>三者的区别</h2><blockquote><p>首页call和apply的区别在于call后面的参数是每一个进行传递。例如:</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addAgeProp</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addHighProp</span>(<span class="params">high</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.high = high</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addAgeProp.call(obj,<span class="number">18</span>) <span class="comment">// 使用call进行传参</span></span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"></span><br><span class="line">addHighProp.apply(obj,[<span class="number">1.80</span>])</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br></pre></td></tr></table></figure><blockquote><p>而bind则是延迟调用，使用bind函数不会立即生效，需要把函数再次进行执行后才会生效</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addAgeProp</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> exec = addAgeProp.bind(obj,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">console</span>.log(exec()) <span class="comment">// 只有当执行后面的函数后obj的身上才会多一个age属性</span></span><br></pre></td></tr></table></figure><blockquote><p>接下来我们来分别来模拟实现一下这三个函数</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.call2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = [...arguments] <span class="comment">// 处理参数</span></span><br><span class="line">  <span class="keyword">var</span> ctx = args.shift() || <span class="built_in">window</span>; <span class="comment">// 如果参数为null，则对象指向window</span></span><br><span class="line">  ctx.fn = <span class="built_in">this</span> <span class="comment">// 把函数挂在传入的对象下面执行</span></span><br><span class="line">  ctx.fn(...args)</span><br><span class="line">  <span class="keyword">delete</span> ctx.fn <span class="comment">// 最后删除函数、返回当前对象</span></span><br><span class="line">  <span class="keyword">return</span> ctx</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  name: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addAgeProp</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line">addAgeProp.call2(obj,<span class="number">18</span>)</span><br><span class="line"><span class="built_in">console</span>.log(obj)</span><br><span class="line"></span><br><span class="line">addAgeProp.call2(<span class="literal">null</span>,<span class="number">18</span>)</span><br></pre></td></tr></table></figure><p>apply的实现跟call一致，只需要在传递参数的时候把rest参数改为数组即可</p><blockquote><p>bind的延迟执行采用了函数柯里化，在内部返回了一个函数，所以需要再执行一次才会执行</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> fn = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">var</span> args = [].slice.apply(<span class="built_in">arguments</span>)</span><br><span class="line">  <span class="keyword">var</span> ctx = args.shift() || <span class="built_in">window</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    fn.apply(ctx,args.concat(...arguments))</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以前面试经常被问到call,apply,bind的区别是什么，一直也没有深入研究，趁着这两天比较空闲，打算研究一下这个问题&lt;/p&gt;
&lt;h2 id=&quot;三者的区别&quot;&gt;&lt;a href=&quot;#三者的区别&quot; class=&quot;headerlink&quot; title=&quot;三者的区别&quot;&gt;&lt;/a&gt;三者</summary>
      
    
    
    
    
    <category term="javascript" scheme="https://github.com/fengyk1/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>防抖和节流的作用及实现</title>
    <link href="https://github.com/fengyk1/2021/06/03/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81%E7%9A%84%E4%BD%9C%E7%94%A8%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
    <id>https://github.com/fengyk1/2021/06/03/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81%E7%9A%84%E4%BD%9C%E7%94%A8%E5%8F%8A%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-06-03T06:16:50.000Z</published>
    <updated>2021-06-07T09:43:15.913Z</updated>
    
    <content type="html"><![CDATA[<p>函数防抖和函数节流是一种高频率执行js的优化手段，比如浏览器中的resize,scroll,鼠标mouseover,mouseover等事件触发会一直不断的调用绑定在事件上的回调函数，极大的浪费资源，降低性能。为了优化体验，需要对这类事件进行调用次数限制</p><h2 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h2><blockquote><p>事件被触发n秒后执行回调，如果执行期间触发，将重新计时</p></blockquote><ul><li>根据以上规则我们来编写一个防抖函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn,delay</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> _this = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> args = [].slice.apply(<span class="built_in">arguments</span>)</span><br><span class="line">    <span class="keyword">if</span> (timer)&#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">      fn.apply(_this, args)</span><br><span class="line">    &#125;,delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = debounce(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1111</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><h2 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h2><blockquote><p>节流是在执行函数的时候每隔一定的事件，只执行一次</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn,delay</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="built_in">this</span></span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span></span><br><span class="line">    <span class="keyword">if</span> (!timer)&#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        fn.apply(_this,args);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;,delay)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test = throttle(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;5秒只执行一次&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;函数防抖和函数节流是一种高频率执行js的优化手段，比如浏览器中的resize,scroll,鼠标mouseover,mouseover等事件触发会一直不断的调用绑定在事件上的回调函数，极大的浪费资源，降低性能。为了优化体验，需要对这类事件进行调用次数限制&lt;/p&gt;
&lt;h2 i</summary>
      
    
    
    
    
    <category term="javascript" scheme="https://github.com/fengyk1/tags/javascript/"/>
    
  </entry>
  
</feed>
